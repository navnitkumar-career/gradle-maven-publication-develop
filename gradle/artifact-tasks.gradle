/*
 * Copyright (c) 2018. Kaede<kidhaibara@gmail.com>
 */

def isAndroidProject() {
    def plugins = project.getPlugins()
    return plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')
}

// ----------
// Common config of artifact tasks:
// Config archives: sources.jar, javadoc.jar, etc.
// ----------
if (isAndroidProject()) {
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.source
        exclude '**/R.html'
        exclude '**/R.*.html'
        exclude '**/index.html'
        exclude '**/pom.xml'
        exclude '**/proguard_annotations.pro'
        classpath += files(android.bootClasspath.join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompile.classpath
            }
        }
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }

    android.libraryVariants.all { variant ->
        def name = variant.name
        task "jar${name.capitalize()}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
        if (name == 'release') {
            def scope = variant.variantData.scope
            androidSourcesJar.dependsOn scope.javacTask.name
            androidSourcesJar.from scope.annotationProcessorOutputDir, scope.buildConfigSourceOutputDir
        }
    }

} else {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).all {
    options.encoding = "UTF-8"
    options.addStringOption('encoding', 'UTF-8')
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}